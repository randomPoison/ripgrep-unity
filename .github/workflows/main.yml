name: Build and Test

on:
  pull_request: {}
  push: { branches: [master] }

jobs:
  buildAndTest:
    name: Test against ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2019.3.11f1
        include:
          - unityVersion: 2019.3.11f1
            projectPath: test-project-2019.3
            licenseSecret: UNITY_LICENSE_2019_3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Run tests
        uses: webbertakken/unity-test-runner@v1.7
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
        env:
          UNITY_LICENSE: ${{ secrets[matrix.licenseSecret] }}

      - run: ls -al Library/com.random-poison.ripgrep-unity/ripgrep-12.1.1-x86_64-unknown-linux-musl
        if: always()

      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: Test results
          path: artifacts

      - uses: MirrorNG/nunit-reporter@v1.0.9
        if: always()
        with:
          path: artifacts/*.xml
          access-token: ${{ secrets.GITHUB_TOKEN }}

  checkFormatting:
    name: Check Code Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.403

      - name: Problem Matcher for dotnet-format
        uses: xt0rted/dotnet-format-problem-matcher@v1.2.0

      - run: dotnet tool install -g dotnet-format
      - run: dotnet format . --folder --check --exclude test-project-2019.3\Library
